name: DEPLOY to Airflow
on:
  workflow_dispatch:

jobs:
  check_branch:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/test' && github.ref != 'refs/heads/main'
    steps:
      - name: run
        run: |
          echo ${{ github.ref }}
          echo "This isn't a master/test branch. Deployment can be done on master and test branches only. "
          exit 1

  set_environment:
    needs: check_branch
    runs-on: ubuntu-latest
    if: ${{ !failure() }}
    steps:
      - name: Set Environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment_name=Production" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/test" ]; then
            echo "environment_name=Test" >> $GITHUB_ENV
          else
            echo "environment_name=Development" >> $GITHUB_ENV
          fi
    outputs:
      env_name: ${{ env.environment_name }}

  deploy:
    needs: set_environment
    runs-on: ubuntu-latest
    environment:
      name: "${{ needs.set_environment.outputs.env_name }}"
    if: ${{ !failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setting env variables
        id: env_variables
        run: |
          echo "Deployed!"

  approve_deployment:
    needs: set_environment
    runs-on: ubuntu-latest
    if: ${{ !failure() }}
    steps:
      - name: Sleep for 30 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'
        
      - name: Approve deployment if author is part of the team
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.getAllEnvironments({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const { data: test } = await github.actions.getPendingDeploymentsForRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            console.log(`${JSON.stringify(test)}`);
            
            try {
              await github.rest.actions.reviewPendingDeploymentsForRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                state: 'approved',
                environment_ids: [data.environments.find(env => env.name === '${{ needs.set_environment.outputs.env_name }}').id],
                comment: "Deployment approved automatically by team membership."
              });
            } catch (error) {
              console.log(`${JSON.stringify(error)}`);
            }
