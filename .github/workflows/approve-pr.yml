name: DEPLOY to Airflow
on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # Trigger every minute (with a 5-minute minimum interval enforced)

jobs:
  check_branch:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/test' && github.ref != 'refs/heads/main'
    steps:
      - name: run
        run: |
          echo ${{ github.ref }}
          echo "This isn't a master/test branch. Deployment can be done on master and test branches only. "
          exit 1

  set_environment:
    needs: check_branch
    runs-on: ubuntu-latest
    if: ${{ !failure() }}
    steps:
      - name: Set Environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment_name=Production" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/test" ]; then
            echo "environment_name=Test" >> $GITHUB_ENV
          else
            echo "environment_name=Development" >> $GITHUB_ENV
          fi
    outputs:
      env_name: ${{ env.environment_name }}

  deploy:
    needs: set_environment
    runs-on: ubuntu-latest
    environment:
      name: "${{ needs.set_environment.outputs.env_name }}"
    if: ${{ !failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setting env variables
        id: env_variables
        run: |
          echo "Deployed!"

  approve_deployment:
    needs: set_environment
    runs-on: ubuntu-latest
    if: ${{ !failure() && github.ref == 'refs/heads/main' }}
    steps:

      - name: Check if the author is part of the required team
        id: check-team
        uses: actions/github-script@v6
        timeout-minutes: 1
        with:
          github-token: ${{ secrets.PR_APPROVER }}
          script: |
            if (!context.payload.sender) {
              core.setOutput('isApproved', true);
              console.log('Scheduled run. Approving deployment.');
              return;
            }

            const author = context.payload.sender.login;
            const org = context.repo.owner; // Your GitHub organization
            const teamSlug = 'dataanalytics-analytics-core-pr-approvers';
            
            try {
              // Check if the author is part of the team
              const { data } = await github.rest.teams.getMembershipForUserInOrg({
                org: org,
                team_slug: teamSlug,
                username: author
              })


              const isPartOfTeam = data.state === 'active';
              
              if (isPartOfTeam) {
                core.setOutput('isApproved', true);
                console.log(`${author} is part of the team '${teamSlug}'. Approving deployment.`);
              } else {
                core.setOutput('isApproved', false);
                console.log(`${author} membership to the team '${teamSlug} is ${data.state}'. Deployment needs manual approval.`);
              }
            } catch (error) {
              core.setOutput('isApproved', false);
              console.log(`${author} is NOT part of the team '${teamSlug}'. Deployment needs manual approval.`);
            }
        
      - name: Approve deployment if author is part of the team
        if: steps.check-team.outputs.isApproved == 'true'
        uses: actions/github-script@v6
        timeout-minutes: 1
        with:
          github-token: ${{ secrets.PR_APPROVER }}
          script: |
            const environmentResponse = await github.rest.repos.getEnvironment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment_name: 'Production'
            })

            const { data: test } = await github.rest.actions.getPendingDeploymentsForRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            console.log(`${JSON.stringify(test)}`);
            console.log(`${JSON.stringify(environmentResponse.data)}`);

            try {
              await github.rest.actions.reviewPendingDeploymentsForRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                state: 'approved',
                environment_ids: [environmentResponse.data.id],
                comment: "Deployment approved automatically by team membership."
              });
            } catch (error) {
              console.log(`${JSON.stringify(error)}`);
            }
